"""vxsweet"""

################################################################################
# GENERAL
################################################################################
bazel_dep(name = "aspect_bazel_lib", version = "2.7.8")
bazel_dep(name = "bazel_skylib_gazelle_plugin", version = "1.7.1")
bazel_dep(name = "bazel_skylib", version = "1.7.1")
bazel_dep(name = "buildifier_prebuilt", version = "6.4.0")
bazel_dep(name = "buildozer", version = "7.1.2")
bazel_dep(name = "gazelle", version = "0.38.0")

################################################################################
# JAVASCRIPT
################################################################################
bazel_dep(name = "aspect_rules_jest", version = "0.22.0")
bazel_dep(name = "aspect_rules_js", version = "2.1.0")
bazel_dep(name = "aspect_rules_ts", version = "3.2.1")
bazel_dep(name = "rules_nodejs", version = "6.3.0")

# Register explicit NodeJS runtime and build toolchain version:
node = use_extension("@rules_nodejs//nodejs:extensions.bzl", "node")
node.toolchain(node_version = "20.16.0")

# Set up TypeScript compiler toolchain::
rules_ts_ext = use_extension("@aspect_rules_ts//ts:extensions.bzl", "ext")
rules_ts_ext.deps()
use_repo(rules_ts_ext, "npm_typescript")

# Set up node module repos:
npm = use_extension("@aspect_rules_js//npm:extensions.bzl", "npm")
npm.npm_translate_lock(
    name = "npm",
    # These dependencies have tricky transitive dependencies and assumptions
    # about shared libraries installed on the system, so this makes sure they
    # have access to the non-hermetic env vars to simplify things.
    # This puts the responsibility of repeatability on the environment setup
    # solution (e.g. pre-built VMs, declarative env configurations, etc).
    lifecycle_hooks_use_default_shell_env = {
        "@votingworks/qrdetect": "true",
        "canvas": "true",
        "node-quirc": "true",
    },
    npmrc = "//:.npmrc",
    pnpm_lock = "//:pnpm-lock.yaml",
    verify_node_modules_ignored = "//:.bazelignore",
)
use_repo(npm, "npm")

# Provide an hermetic pnpm to enable consistent pnpm runs across dev envs,
# without requring an installation of a specific version:
pnpm = use_extension("@aspect_rules_js//npm:extensions.bzl", "pnpm")
pnpm.pnpm(
    name = "pnpm",
    pnpm_version = "8.15.5",
)
use_repo(pnpm, "pnpm")

################################################################################
# RUST
################################################################################
bazel_dep(name = "rules_rust", version = "0.51.0")

rust = use_extension("@rules_rust//rust:extensions.bzl", "rust")
rust.toolchain(
    edition = "2021",
    versions = ["1.81.0"],
)
use_repo(rust, "rust_toolchains")

register_toolchains("@rust_toolchains//:all")

crate = use_extension("@rules_rust//crate_universe:extension.bzl", "crate")

# TODO: Re-enable to compare performance - this is a lot more ergonomic, but
# seems to be an order of magnitude slower in the analysis phase:
#
# crate.from_cargo(
#     name = "crates",
#     cargo_lockfile = "//:Cargo.lock",
#     manifests = [
#         "//:Cargo.toml",
#         "//apps/mark-scan/accessible-controller:Cargo.toml",
#         "//apps/mark-scan/daemon-utils:Cargo.toml",
#         "//apps/mark-scan/fai-100-controller:Cargo.toml",
#         "//apps/mark-scan/pat-device-input:Cargo.toml",
#         "//libs/ballot-interpreter:Cargo.toml",
#         "//libs/logging:Cargo.toml",
#         "//libs/pdi-scanner:Cargo.toml",
#         "//libs/types-rs:Cargo.toml",
#     ],
# )
#
# ##########

# TODO: if there's no way to improve performance of `cargo.from_cargo` above,
# generate these from the Cargo.toml & Cargo.lock to avoid maintaining both.
# Alternatively, drop `Cargo.toml` files and autogen them in the build process.
crate.spec(package = "ab_glyph", version = "0.2.23")
crate.spec(package = "anyhow", version = "1.0.75")
crate.spec(package = "base64", version = "0.22.0")
crate.spec(package = "bitter", version = "0.6.1")
crate.spec(package = "chrono", version = "0.4.31")
crate.spec(package = "clap", version = "4.0.29", features = ["cargo", "derive", "env"])
crate.spec(package = "color-eyre", version = "0.6.2")
crate.spec(package = "crc16", version = "0.4.0")
crate.spec(package = "crossterm", version = "0.27.0")
crate.spec(package = "csv", version = "1.3.0")
crate.spec(package = "ctrlc", version = "3.4.2")
crate.spec(package = "hex", version = "0.4.3")
crate.spec(package = "image", version = "0.25.0")
crate.spec(package = "imageproc", version = "0.24.0")
crate.spec(package = "itertools", version = "0.12.1")
crate.spec(package = "libc", version = "0.2.153")
crate.spec(package = "log", version = "0.4.17")
crate.spec(package = "logging_timer", version = "1.1.0")
crate.spec(package = "neon", version = "1.0.0", default_features = False, features = ["napi-6"])
crate.spec(package = "neon-serde3", version = "0.10.0")
crate.spec(package = "nom", version = "7.1.3")
crate.spec(package = "num_enum", version = "0.7.1")
crate.spec(package = "pkg-config", version = "0.3.2")
crate.spec(package = "pretty_env_logger", version = "0.5.0")
crate.spec(package = "proptest", version = "1.0.0")
crate.spec(package = "psutil", version = "3.3.0")
crate.spec(package = "rand", version = "0.8.5")
crate.spec(package = "rayon", version = "1.5.3")
crate.spec(package = "rqrr", version = "0.7.1")
crate.spec(package = "rusb", version = "0.9.3")
crate.spec(package = "serde", version = "1.0.150", features = ["derive"])
crate.spec(package = "serde_bytes", version = "0.11.14")
crate.spec(package = "serde_json", version = "1.0.89")
crate.spec(package = "serialport", version = "4.2.2")
crate.spec(package = "tempfile", version = "3.3.0")
crate.spec(package = "thiserror", version = "1.0.50")
crate.spec(package = "tracing", version = "0.1.40")
crate.spec(package = "tracing-subscriber", version = "0.3.18", features = ["env-filter"])
crate.spec(package = "uinput", version = "0.1.3")
crate.spec(package = "users", version = "0.11.0")
crate.spec(package = "zbar-rust", version = "0.0.23")

crate.annotation(
    crate = "libudev-sys",
    override_target_lib = "//libs/libudev-sys",
)

crate.from_specs()
use_repo(crate, "crates")

################################################################################
# GOLANG (Only needed for the build file auto-updater, Gazelle.)
################################################################################
bazel_dep(name = "rules_go", version = "0.50.1")

go_sdk = use_extension("@rules_go//go:extensions.bzl", "go_sdk")
go_sdk.download(
    name = "go_sdk",
    version = "1.23.2",
)
use_repo(go_sdk, "go_toolchains")

register_toolchains("@go_toolchains//:all")

go_deps = use_extension("@gazelle//:extensions.bzl", "go_deps")
go_deps.from_file(go_mod = "//:go.mod")
use_repo(
    go_deps,
    "com_github_smacker_go_tree_sitter",
    "com_github_stretchr_testify",
)
