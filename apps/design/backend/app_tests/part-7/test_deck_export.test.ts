jest.mock('@vx/libs/utils/src', (): typeof import('@vx/libs/utils/src') => {
  return {
    ...jest.requireActual('@vx/libs/utils/src'),
    isFeatureFlagEnabled: (flag) => mockFeatureFlagger.isEnabled(flag),
  };
});

jest.mock('../../src/ballot_style_reports');

jest.mock('@vx/libs/hmpb/src', () => {
  const original = jest.requireActual('@vx/libs/hmpb/src');
  return {
    ...original,
    renderAllBallotsAndCreateElectionDefinition: jest.fn(
      original.renderAllBallotsAndCreateElectionDefinition
    ),
  };
});

import { Buffer } from 'node:buffer';
import JsZip from 'jszip';
import { electionTwoPartyPrimaryDefinition } from '@vx/libs/fixtures/src';
import {
  BallotType,
  type Election,
  LanguageCode,
  type UiStringsPackage,
  mergeUiStrings,
} from '@vx/libs/types/src';
import {
  BooleanEnvironmentVariableName,
  getFeatureFlagMock,
} from '@vx/libs/utils/src';
import { getBallotStylesByPrecinctId } from '@vx/libs/utils/src/tabulation';
import { mockOf } from '@vx/libs/test-utils/src';
import {
  hmpbStringsCatalog,
  renderAllBallotsAndCreateElectionDefinition,
  vxDefaultBallotTemplate,
} from '@vx/libs/hmpb/src';
import { testSetupHelpers } from '../../test/helpers';
import { FULL_TEST_DECK_TALLY_REPORT_FILE_NAME } from '../../src/test_decks';
import { renderBallotStyleReadinessReport } from '../../src/ballot_style_reports';

jest.setTimeout(60_000);

const mockFeatureFlagger = getFeatureFlagMock();

const { setupApp, cleanup } = testSetupHelpers();

const MOCK_READINESS_REPORT_CONTENTS = '%PDF - MockReadinessReport';
const MOCK_READINESS_REPORT_PDF = Buffer.from(
  MOCK_READINESS_REPORT_CONTENTS,
  'utf-8'
);

function expectedEnglishBallotStrings(election: Election): UiStringsPackage {
  const expectedStrings = mergeUiStrings(election.ballotStrings, {
    [LanguageCode.ENGLISH]: hmpbStringsCatalog,
  });
  // Ballot style IDs are generated by VxDesign and then translated
  expectedStrings[LanguageCode.ENGLISH]!['ballotStyleId'] = Object.fromEntries(
    election.ballotStyles.map(({ id, groupId }) => [id, groupId])
  );
  return expectedStrings;
}

afterAll(cleanup);

beforeEach(() => {
  mockFeatureFlagger.resetFeatureFlags();
  mockFeatureFlagger.enableFeatureFlag(
    BooleanEnvironmentVariableName.ENABLE_CLOUD_TRANSLATION_AND_SPEECH_SYNTHESIS
  );

  mockOf(renderBallotStyleReadinessReport).mockResolvedValue(
    MOCK_READINESS_REPORT_PDF
  );
});

test('Export test decks', async () => {
  // This test runs unnecessarily long if we're generating exports for all
  // languages, so disabling multi-language support for this case:
  mockFeatureFlagger.disableFeatureFlag(
    BooleanEnvironmentVariableName.ENABLE_CLOUD_TRANSLATION_AND_SPEECH_SYNTHESIS
  );

  const electionDefinition = electionTwoPartyPrimaryDefinition;
  const { apiClient } = setupApp();

  const electionId = (
    await apiClient.loadElection({
      electionData: electionDefinition.electionData,
    })
  ).unsafeUnwrap();
  const { election } = await apiClient.getElection({ electionId });

  const { zipContents } = await apiClient.exportTestDecks({
    electionId,
    electionSerializationFormat: 'vxf',
  });
  const zip = await JsZip.loadAsync(zipContents);

  const precinctsWithBallots = election.precincts.filter(
    (precinct) =>
      getBallotStylesByPrecinctId(electionDefinition, precinct.id).length > 0
  );
  expect(Object.keys(zip.files).sort()).toEqual(
    [
      ...precinctsWithBallots.map(
        (precinct) => `${precinct.name.replaceAll(' ', '_')}-test-ballots.pdf`
      ),
      FULL_TEST_DECK_TALLY_REPORT_FILE_NAME,
    ].sort()
  );

  // We test the actual test deck content in test_decks.ts
  for (const file of Object.values(zip.files)) {
    expect(await file.async('text')).toContain('%PDF');
  }
  expect(renderAllBallotsAndCreateElectionDefinition).toHaveBeenCalledTimes(1);
  const expectedBallotProps = election.ballotStyles.flatMap((ballotStyle) =>
    ballotStyle.precincts.map((precinctId) => ({
      election: {
        ...election,
        ballotStrings: expectedEnglishBallotStrings(election),
      },
      ballotStyleId: ballotStyle.id,
      precinctId,
      ballotType: BallotType.Precinct,
      ballotMode: 'test',
    }))
  );
  expect(renderAllBallotsAndCreateElectionDefinition).toHaveBeenCalledWith(
    expect.any(Object), // Renderer
    vxDefaultBallotTemplate,
    expectedBallotProps,
    'vxf'
  );
});
