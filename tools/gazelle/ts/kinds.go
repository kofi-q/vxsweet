package ts

import (
	"github.com/bazelbuild/bazel-gazelle/rule"
)

var (
	lintTestKindName    = "lint_test"
	tsPackageKindName   = "ts_package"
	tsLibraryKindName   = "ts_library"
	tsTestsKindName     = "ts_tests"
	tsStoriesKindName   = "ts_stories"
	jsonPackageKindName = "json_package"

	kinds = map[string]rule.KindInfo{
		tsStoriesKindName: {
			MatchAny: true,
			SubstituteAttrs: map[string]bool{
				"deps": true,
			},
			MergeableAttrs: map[string]bool{
				"name": true,
				"deps": true,
			},
			NonEmptyAttrs: map[string]bool{
				"name": true,
			},
			ResolveAttrs: map[string]bool{
				"name": true,
				"deps": true,
			},
		},

		lintTestKindName: {
			MatchAny:        true,
			MergeableAttrs:  map[string]bool{"name": true},
			NonEmptyAttrs:   map[string]bool{"name": true},
			ResolveAttrs:    map[string]bool{"name": true},
			SubstituteAttrs: map[string]bool{},
		},

		tsTestsKindName: {
			MatchAny: true,
			SubstituteAttrs: map[string]bool{
				"deps": true,
			},
			MergeableAttrs: map[string]bool{
				"name": true,
				"deps": true,
			},
			NonEmptyAttrs: map[string]bool{
				"name": true,
			},
			ResolveAttrs: map[string]bool{
				"name": true,
				"deps": true,
			},
		},

		tsLibraryKindName: {
			MatchAny: true,
			SubstituteAttrs: map[string]bool{
				"deps": true,
			},
			MergeableAttrs: map[string]bool{
				"name": true,
				"deps": true,
			},
			NonEmptyAttrs: map[string]bool{
				"name": true,
			},
			ResolveAttrs: map[string]bool{
				"name": true,
				"deps": true,
			},
		},

		tsPackageKindName: {
			MatchAny: true,
			SubstituteAttrs: map[string]bool{
				"src_deps":   true,
				"test_deps":  true,
				"type_deps":  true,
				"story_deps": true,
			},
			MergeableAttrs: map[string]bool{
				"name":       true,
				"src_deps":   true,
				"test_deps":  true,
				"type_deps":  true,
				"story_deps": true,
			},
			NonEmptyAttrs: map[string]bool{
				"name": true,
			},
			ResolveAttrs: map[string]bool{
				"name":       true,
				"src_deps":   true,
				"test_deps":  true,
				"type_deps":  true,
				"story_deps": true,
			},
		},

		jsonPackageKindName: {
			MatchAny: true,
			SubstituteAttrs: map[string]bool{
				"tags":       true,
				"visibility": true,
			},
			MergeableAttrs: map[string]bool{
				"name":       true,
				"tags":       true,
				"visibility": true,
			},
			NonEmptyAttrs: map[string]bool{
				"name": true,
			},
			ResolveAttrs: map[string]bool{
				"name":       true,
				"tags":       true,
				"visibility": true,
			},
		},
	}
)

// Kinds returns a map of maps rule names (kinds) and information on how to
// match and merge attributes that may be found in rules of those kinds. All
// kinds of rules generated for this language may be found here.
func (t *tsPackage) Kinds() map[string]rule.KindInfo {
	return kinds
}

// Loads returns .bzl files and symbols they define. Every rule generated by
// GenerateRules, now or in the past, should be loadable from one of these
// files.
//
// Deprecated: Use ModuleAwareLanguage's ApparentLoads.
func (*tsPackage) Loads() []rule.LoadInfo {
	panic("ApparentLoads should be called instead")
}

// ApparentLoads returns .bzl files and symbols they define. Every rule
// generated by GenerateRules, now or in the past, should be loadable from
// one of these files.
//
// The moduleToApparentName argument is a function that resolves a given
// Bazel module name to the apparent repository name configured for this
// module in the MODULE.bazel file, or the empty string if there is no such
// module or the MODULE.bazel file doesn't exist. Languages should use the
// non-empty value returned by this function to form the repository part of
// the load statements they return and fall back to using the legacy
// WORKSPACE name otherwise.
//
// See https://bazel.build/external/overview#concepts for more information
// on repository names.
//
// Example: For a project with these lines in its MODULE.bazel file:
//
//	bazel_dep(name = "rules_go", version = "0.38.1", repo_name = "my_rules_go")
//	bazel_dep(name = "gazelle", version = "0.27.0")
//
// moduleToApparentName["rules_go"] == "my_rules_go"
// moduleToApparentName["gazelle"] == "gazelle"
// moduleToApparentName["foobar"] == ""
func (*tsPackage) ApparentLoads(_ func(string) string) []rule.LoadInfo {
	return []rule.LoadInfo{
		{
			Name:    "//tools/ts_build:defs.bzl",
			Symbols: []string{tsPackageKindName},
		},
		{
			Name:    "//tools/ts_build:ts_library.bzl",
			Symbols: []string{tsLibraryKindName},
		},
		{
			Name:    "//tools/ts_build:ts_tests.bzl",
			Symbols: []string{tsTestsKindName},
		},
		{
			Name:    "//tools/ts_build:lint_test.bzl",
			Symbols: []string{lintTestKindName},
		},
		{
			Name:    "//tools/ts_build:ts_stories.bzl",
			Symbols: []string{tsStoriesKindName},
		},
		{
			Name:    "//tools/ts_build:json_package.bzl",
			Symbols: []string{jsonPackageKindName},
		},
	}
}
