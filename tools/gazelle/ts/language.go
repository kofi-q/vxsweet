package ts

import (
	"github.com/bazelbuild/bazel-gazelle/config"
	"github.com/bazelbuild/bazel-gazelle/language"
	"github.com/bazelbuild/bazel-gazelle/rule"
)

type GazelleLanguage interface {
	language.Language
	language.ModuleAwareLanguage
}

const languageName = "js"

type tsPackage struct {
	// Set of relative paths to directories containing buildable JS/TS code. If
	// the value is false, it means the directory does not contain buildable JS/TS
	//  code, but it has a subdirectory which does.
	packageRelativePaths map[string]bool
}

// Fix implements language.Language.
func (t *tsPackage) Fix(c *config.Config, f *rule.File) {
}

// Name returns the name of the language. This should be a prefix of the
// kinds of rules generated by the language, e.g., "go" for the Go extension
// since it generates "go_library" rules.
func (t *tsPackage) Name() string {
	return languageName
}

func NewLanguage() GazelleLanguage {
	return &tsPackage{packageRelativePaths: make(map[string]bool)}
}
